generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectType {
  DEVELOPMENT
  DESIGN
  MARKETING
  RESEARCH
  OTHER
}

enum TimelineEventStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  password  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectsOwned   Project[]          @relation("ProjectOwner")
  apiConfigurations ApiConfiguration[] @relation("UserApiConfigs")
  apiActivities   ApiActivity[]      @relation("UserApiActivities")
  generalTasks    GeneralTask[]      @relation("UserGeneralTasks")
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  projectGoal  String?
  projectValue Float?
  website      String?
  status       ProjectStatus @default(PLANNING)
  priority     Priority      @default(MEDIUM)
  projectType  ProjectType   @default(DEVELOPMENT)
  startDate    DateTime?
  endDate      DateTime?
  budget       Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  owner          User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  
  timelineEvents TimelineEvent[]
}

model TimelineEvent {
  id          String              @id @default(cuid())
  projectId   String
  title       String
  description String?
  date        DateTime
  type        String              @default("milestone")
  status      TimelineEventStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum ApiProvider {
  GOOGLE_ADWORDS
  GOOGLE_ANALYTICS
  FACEBOOK_ADS
  TWITTER_ADS
  LINKEDIN_ADS
}

enum ApiConfigStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum ApiActivityType {
  CONNECTION_TEST
  DATA_SYNC
  CAMPAIGN_FETCH
  KEYWORD_UPDATE
  REPORT_FETCH
  GOAL_UPDATE
  RATE_LIMIT_WARNING
  ERROR
  METRICS_SYNC
  CAMPAIGN_SYNC
  BACKGROUND_SYNC
}

enum ApiActivityStatus {
  SUCCESS
  WARNING
  ERROR
}

model ApiConfiguration {
  id            String          @id @default(cuid())
  userId        String
  provider      ApiProvider
  name          String
  clientId      String
  clientSecret  String          // Encrypted
  developerToken String?        // Encrypted
  apiKey        String?         // Encrypted
  refreshToken  String?         // Encrypted
  accessToken   String?         // Encrypted
  tokenExpiry   DateTime?
  status        ApiConfigStatus @default(INACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User                @relation("UserApiConfigs", fields: [userId], references: [id], onDelete: Cascade)
  activities    ApiActivity[]       @relation("ApiConfigActivities")
  googleAdsCampaigns GoogleAdsCampaign[] @relation("GoogleAdsCampaigns")

  @@unique([userId, provider])
}

model ApiActivity {
  id            String            @id @default(cuid())
  userId        String
  apiConfigId   String
  provider      ApiProvider
  type          ApiActivityType
  status        ApiActivityStatus
  title         String
  description   String?
  metadata      Json?             // Additional data like sync counts, errors, etc.
  createdAt     DateTime          @default(now())

  user          User              @relation("UserApiActivities", fields: [userId], references: [id], onDelete: Cascade)
  apiConfig     ApiConfiguration  @relation("ApiConfigActivities", fields: [apiConfigId], references: [id], onDelete: Cascade)
}

// Local storage for Google Ads campaigns and metrics
model GoogleAdsCampaign {
  id                String   @id @default(cuid())
  apiConfigId       String
  campaignId        String   // Google Ads campaign ID
  name              String
  status            String
  budget            Float?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastSyncAt        DateTime @default(now())

  apiConfig         ApiConfiguration @relation("GoogleAdsCampaigns", fields: [apiConfigId], references: [id], onDelete: Cascade)
  metrics           GoogleAdsMetrics[]

  @@unique([apiConfigId, campaignId])
}

model GoogleAdsMetrics {
  id              String   @id @default(cuid())
  campaignId      String
  date            DateTime @db.Date
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  conversions     Float    @default(0)
  cost            Float    @default(0) // Cost in account currency
  ctr             Float    @default(0) // Click-through rate
  averageCpc      Float    @default(0) // Average cost per click
  conversionRate  Float    @default(0) // Conversion rate percentage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  campaign        GoogleAdsCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
}

model GeneralTask {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  completed   Boolean  @default(false)
  dueDate     DateTime? @db.Date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserGeneralTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, completed])
  @@index([userId, dueDate])
}