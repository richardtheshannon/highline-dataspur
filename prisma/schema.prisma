generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  name              String?
  role              UserRole           @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  password          String?
  apiActivities     ApiActivity[]      @relation("UserApiActivities")
  apiConfigurations ApiConfiguration[] @relation("UserApiConfigs")
  generalTasks      GeneralTask[]      @relation("UserGeneralTasks")
  projectsOwned     Project[]          @relation("ProjectOwner")
}

model Project {
  id             String          @id @default(cuid())
  name           String
  description    String?
  projectGoal    String?
  projectValue   Float?
  website        String?
  status         ProjectStatus   @default(PLANNING)
  priority       Priority        @default(MEDIUM)
  projectType    ProjectType     @default(DEVELOPMENT)
  startDate      DateTime?
  endDate        DateTime?
  budget         Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ownerId        String
  owner          User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  timelineEvents TimelineEvent[]
}

model TimelineEvent {
  id          String              @id @default(cuid())
  projectId   String
  title       String
  description String?
  date        DateTime
  type        String              @default("milestone")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  status      TimelineEventStatus @default(PENDING)
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ApiConfiguration {
  id                 String              @id @default(cuid())
  userId             String
  provider           ApiProvider
  name               String
  clientId           String
  clientSecret       String
  developerToken     String?
  apiKey             String?
  refreshToken       String?
  accessToken        String?
  tokenExpiry        DateTime?
  status             ApiConfigStatus     @default(INACTIVE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  activities         ApiActivity[]       @relation("ApiConfigActivities")
  user               User                @relation("UserApiConfigs", fields: [userId], references: [id], onDelete: Cascade)
  googleAdsCampaigns GoogleAdsCampaign[] @relation("GoogleAdsCampaigns")

  @@unique([userId, provider])
}

model ApiActivity {
  id          String            @id @default(cuid())
  userId      String
  apiConfigId String
  provider    ApiProvider
  type        ApiActivityType
  status      ApiActivityStatus
  title       String
  description String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  apiConfig   ApiConfiguration  @relation("ApiConfigActivities", fields: [apiConfigId], references: [id], onDelete: Cascade)
  user        User              @relation("UserApiActivities", fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleAdsCampaign {
  id          String             @id @default(cuid())
  apiConfigId String
  campaignId  String
  name        String
  status      String
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  lastSyncAt  DateTime           @default(now())
  apiConfig   ApiConfiguration   @relation("GoogleAdsCampaigns", fields: [apiConfigId], references: [id], onDelete: Cascade)
  metrics     GoogleAdsMetrics[]

  @@unique([apiConfigId, campaignId])
}

model GoogleAdsMetrics {
  id             String            @id @default(cuid())
  campaignId     String
  date           DateTime          @db.Date
  impressions    Int               @default(0)
  clicks         Int               @default(0)
  conversions    Float             @default(0)
  cost           Float             @default(0)
  ctr            Float             @default(0)
  averageCpc     Float             @default(0)
  conversionRate Float             @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  campaign       GoogleAdsCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
}

model GeneralTask {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime? @db.Date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserGeneralTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, completed])
  @@index([userId, dueDate])
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectType {
  DEVELOPMENT
  DESIGN
  MARKETING
  RESEARCH
  OTHER
}

enum TimelineEventStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApiProvider {
  GOOGLE_ADWORDS
  FACEBOOK_ADS
  TWITTER_ADS
  LINKEDIN_ADS
  GOOGLE_ANALYTICS
}

enum ApiConfigStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum ApiActivityType {
  CONNECTION_TEST
  DATA_SYNC
  CAMPAIGN_FETCH
  KEYWORD_UPDATE
  RATE_LIMIT_WARNING
  ERROR
  REPORT_FETCH
  GOAL_UPDATE
  METRICS_SYNC
  CAMPAIGN_SYNC
  BACKGROUND_SYNC
}

enum ApiActivityStatus {
  SUCCESS
  WARNING
  ERROR
}
